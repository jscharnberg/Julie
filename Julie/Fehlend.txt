- Farbige Darstellung nach log level
- Weitere Log Reader
- Logging
- Themes definieren
- einstellungen
- hotkeys
- Lokalisierung (erstmal alles englisch)
- wenn logger datei nicht verarbeiten kann, dann meldung + stopp zu lesen
- logpfade nach OS 



using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using Julie.Core.Services;
using System.Threading.Tasks;

public partial class MainViewModel : ObservableObject
{
    private readonly UpdateService _updateService = new UpdateService("YourGitHubUser", "Julie");

    [ObservableProperty] private string? _latestVersion;
    [ObservableProperty] private bool _updateAvailable;

    [RelayCommand]
    public async Task CheckForUpdateAsync()
    {
        var latest = await _updateService.GetLatestVersionAsync();
        LatestVersion = latest;

        if (!string.IsNullOrEmpty(latest) && latest != AppDomain.CurrentDomain.FriendlyName)
        {
            UpdateAvailable = true;
        }
    }

    [RelayCommand]
    public void DownloadUpdate()
    {
        if (!string.IsNullOrEmpty(LatestVersion))
        {
            var url = _updateService.GetDownloadUrl(LatestVersion);
            System.Diagnostics.Process.Start(new System.Diagnostics.ProcessStartInfo
            {
                FileName = url,
                UseShellExecute = true
            });
        }
    }
}


<StackPanel Orientation="Horizontal" Spacing="10">
    <Button Content="Nach Updates suchen" Command="{Binding CheckForUpdateCommand}"/>
    <Button Content="Update herunterladen" Command="{Binding DownloadUpdateCommand}" IsEnabled="{Binding UpdateAvailable}"/>
    <TextBlock Text="{Binding LatestVersion}"/>
</StackPanel>
